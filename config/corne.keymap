/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

//&led_strip { chain-length = <27>; };

&sl { release-after-ms = <2000>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_num_pad_right_layer {
            bindings = <&tog 9>;
            key-positions = <2 3 4>;
            require-prior-idle-ms = <125>;
        };

        combo_num_pad_left_layer {
            bindings = <&tog 10>;
            key-positions = <19 20 21>;
            require-prior-idle-ms = <125>;
        };

        combo_settings_layer {
            bindings = <&tog 11>;
            key-positions = <1 2 3 4>;
            require-prior-idle-ms = <125>;
        };

        combo_symbols_layer {
            bindings = <&sl 12>;
            key-positions = <31 32 33>;
            require-prior-idle-ms = <125>;
        };

        combo_shortcuts_layer {
            bindings = <&tog 6>;
            key-positions = <28 26>;
            require-prior-idle-ms = <125>;
        };

        combo_num_pad_right_layer_Lhand {
            bindings = <&tog 10>;
            key-positions = <14 3 16>;
            require-prior-idle-ms = <125>;
        };

        combo_num_pad_left_layer_Rhand {
            bindings = <&tog 9>;
            key-positions = <19 8 21>;
            require-prior-idle-ms = <125>;
        };

        combo_default_layer {
            bindings = <&to 0>;
            key-positions = <38 39>;
            require-prior-idle-ms = <125>;
        };

        combo_symbols_layer_sticky {
            bindings = <&sl 12>;
            key-positions = <31 33>;
            require-prior-idle-ms = <125>;
        };

        combo_dot_left {
            bindings = <&kp PERIOD>;
            key-positions = <27 28>;
            layers = <9 2>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_dot_right {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
            layers = <10 5>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_delete_right {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
            layers = <0 14 2 4 1>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_backspace_right {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            layers = <0 14 2 4 1>;
            timeout-ms = <20>;
        };

        combo_delete_left {
            bindings = <&kp DELETE>;
            key-positions = <15 16>;
            layers = <0 14 7 5 6 1 4>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_backspace_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
            layers = <0 14 2 5 9 1 4>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_equal_left {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            layers = <9 2>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_equal_right {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
            layers = <10 5>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_navigation_layer {
            bindings = <&sl 13>;
            key-positions = <14 16>;
            require-prior-idle-ms = <125>;
        };

        combo_QWERTY_layer {
            bindings = <&tog 14>;
            key-positions = <36 41>;
            require-prior-idle-ms = <125>;
        };

        combo_left_arrow_Lhand {
            bindings = <&kp LEFT>;
            key-positions = <26 27>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_right_arrow_Lhand {
            bindings = <&kp RIGHT>;
            key-positions = <27 28>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_up_arrow_Lhand {
            bindings = <&kp UP>;
            key-positions = <3 4>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_down_arrow_Lhand {
            bindings = <&kp DOWN>;
            key-positions = <3 2>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_left_arrow_Rhand {
            bindings = <&kp LEFT>;
            key-positions = <32 31>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_right_arrow_Rhand {
            bindings = <&kp RIGHT>;
            key-positions = <32 33>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_up_arrow_Rhand {
            bindings = <&kp UP>;
            key-positions = <7 8>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_down_arrow_Rhand {
            bindings = <&kp DOWN>;
            key-positions = <8 9>;
            layers = <0 14>;
            require-prior-idle-ms = <125>;
            timeout-ms = <20>;
        };

        combo_esc_shortcuts {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
            layers = <6>;
            require-prior-idle-ms = <125>;
        };

        to_0_L {
            bindings = <&to 0>;
            key-positions = <38 15>;
            require-prior-idle-ms = <125>;
        };

        to_0_R {
            bindings = <&to 0>;
            key-positions = <39 20>;
            require-prior-idle-ms = <125>;
        };

        combo_backspace_right_num {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 8>;
            require-prior-idle-ms = <125>;
            layers = <5>;
        };
    };

    behaviors {
        ht0: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTARY LAYER_TO LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht1: mo_td0 {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TD0";
            bindings = <&mo>, <&td0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht2: mo_keyrepeat {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_KEYREPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht3: mo_td2 {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TD2";
            bindings = <&mo>, <&td2>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht4: hold_comma {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_COMMA+SPACE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&comma>;
        };

        td0: space_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_DOT";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dt PERIOD SPACE>;

            tapping-term-ms = <250>;
        };

        td1: stick_toggle_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "STICK_TOGGLE_ALT";
            #binding-cells = <0>;
            bindings = <&sk LALT>, <&kt LALT>;
        };

        td2: repeat_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "REPEAT_ENTER";
            #binding-cells = <0>;
            bindings = <&key_repeat>, <&kp ENTER>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT>;
            ignore-numbers;
            label = "Smart Numpad Layer";
        };

        num_arrow: num_arrow {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <UP DOWN RIGHT LEFT LGUI LALT LCTRL LSHFT BACKSPACE DELETE>;
            ignore-numbers;
            label = "Smart arrow layer";
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "Smart Numpad";
            bindings = <&num_word>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        smart_num_rpt: smart_num_rpt {
            compatible = "zmk,behavior-hold-tap";
            label = "Smart Numpad+Rpt";
            bindings = <&num_word>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        smart_arrow: smart_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "Smart Arrow Pad";
            bindings = <&num_arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        mod_gui_dance: mod_gui_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_GUI_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LGUI>, <&kt LGUI>;

            tapping-term-ms = <300>;
        };

        mod_alt_dance: mod_alt_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_ALT_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LALT>, <&kt LALT>;

            tapping-term-ms = <300>;
        };

        mod_ctrl_dance: mod_ctrl_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_CTRL_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;

            tapping-term-ms = <300>;
        };

        mod_shft_dance: mod_shft_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_SHFT_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&kt LSHFT>;

            tapping-term-ms = <300>;
        };

        smrt_num_arrw: smart_num_arrw {
            compatible = "zmk,behavior-tap-dance";
            label = "Smart Numpad and Arrowpad";
            #binding-cells = <0>;
            bindings = <&num_word 5>, <&num_arrow 4>;

            tapping-term-ms = <300>;
        };
    };

    macros {
        dt: dt {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE_TAP";
        };

        lu: lu {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_ON &macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "LAYER_UNDERGLOW";
            #binding-cells = <2>;
        };

        lu_white: lu_white {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(0,100,52)>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "LAYER_UNDERGLOW";
            #binding-cells = <1>;
        };

        comma: comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COMMA";
        };

        flash: dongle_bootloader_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 16 &bootloader>;
            label = "Dongle Bootloader";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "BRACKETS";
        };

        arw_f_num: arw_f_num {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &num_arrow MACRO_PLACEHOLDER>;
            label = "Smart Arrow from Numpad";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        WB_LAYER {
            // -----------------------------------------------------------------------------------------
            // | TAB |  /  |  C  |  L   |  M   |  K   |   |  Z   |  F  |  U  |  Q  |  '  |  [  |
            // | ESC |  I  |  S  |  R   |  T   |  G   |   |  P   |  N  |  E  |  A  |  O  |  ;  |
            // | DEL |  .  |  ,  |  W   |  D   |  J   |   |  B   |  H  |  V  |  Y  |  X  |  ]  |
            //                   | SHFT | BKSP | CTRL |   | CTRL | ENT | GUI |

            bindings = <
&kp TAB   &mt LA(P) SLASH  &mt LG(E) C   &mt LC(F) L         &mt LC(A) M         &kp K       &kp Z        &kp F               &kp U           &kp Q  &kp SQT  &brackets
&gresc    &mt LGUI I       &mt LALT S    &mt LCTRL R         &mt LSHFT T         &kp G       &kp P        &kp N               &kp E           &kp A  &kp O    &kp SEMI
&kp CAPS  &kp DOT          &ht4 LC(X) 0  &mt LC(C) W         &mt LC(V) D         &kp J       &kp B        &kp H               &kp V           &kp Y  &kp X    &kp BACKSPACE
                                         &smart_arrow 1 TAB  &smart_num 2 ENTER  &ht1 8 0    &smart_shft  &smart_num_rpt 5 0  &smrt_num_arrw
            >;

            label = "BASE";
        };

        SMART_ARROW_L {
            label = "ARROW_L";
            bindings = <
&trans  &kt LGUI  &kt LALT  &kt LCTRL  &kt LSHFT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                            &trans     &trans     &trans    &trans  &trans  &trans
            >;
        };

        SMART_NUM_L {
            label = "SNUM_L";
            bindings = <
&trans  &brackets     &kp N7  &kp N8  &kp N9  &kp PLUS     &trans  &trans  &trans        &trans  &trans  &trans
&trans  &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS    &trans  &trans  &trans        &trans  &trans  &trans
&trans  &kp ASTERISK  &kp N1  &kp N2  &kp N3  &kp N0       &trans  &trans  &trans        &trans  &trans  &trans
                              &trans  &trans  &trans       &trans  &trans  &arw_f_num 1
            >;
        };

        BASE_COPY {
            label = "BASE_cp";
            bindings = <
&trans  &mt LA(P) SLASH  &kp C           &kp L        &mt LC(A) M       &kp K     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mt LGUI I       &mt LALT S      &mt LCTRL R  &mt LSHFT T       &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp PERIOD       &ht4 LC(X) 0    &mt LC(C) W  &mt LC(V) D       &kp J     &trans  &trans  &trans  &trans  &trans  &trans
                                         &trans       &trans            &trans    &trans  &trans  &trans
            >;
        };

        SMART_ARROW_R {
            label = "ARROW_R";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kt LSHIFT  &kt LCTRL  &kt LALT  &kt LGUI   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT    &kp DOWN   &kp UP    &kp RIGHT  &kp ESCAPE
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans     &trans    &trans     &trans
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };

        SMART_NUM_R {
            label = "SNUM_R";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp PLUS   &kp N7  &kp N8        &kp N9  &brackets     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp N4  &kp N5        &kp N6  &kp SLASH     &kp ESCAPE
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0     &kp N1  &kp N2        &kp N3  &kp ASTERISK  &trans
                        &trans  &trans  &trans    &trans     &trans  &arw_f_num 4
            >;
        };

        SHORTCUT_LAYER_WIN {
            bindings = <
&kp LC(LG(F))  &kp LC(LG(N1))        &kp LC(LG(N2))  &kp LC(LG(NUMBER_3))  &kp LC(LG(NUMBER_4))  &kp LC(LG(N5))    &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(LC(G))  &kp LC(LG(NUMBER_6))  &kp LC(LG(N7))  &kp LC(LG(N8))        &kp LG(LC(N9))        &kp LG(LC(N0))    &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(LG(H))  &kp LC(LG(A))         &kp LC(LG(B))   &kp LC(LG(C))         &kp LC(LG(D))         &kp LC(LG(E))     &trans  &trans  &trans  &trans  &trans  &trans
                                                     &ht0 10 0             &lt 9 ENTER           &kp LSHFT         &trans  &trans  &trans
            >;

            label = "SHCT";
        };

        MAC_layer {
            label = "baseM";
            bindings = <
&kp TAB     &kp SLASH       &kp C           &kt L        &mt LG(A) M       &kp K       &kp Z               &kp F      &kp U        &kp Q  &kp SQT  &kp LEFT_PARENTHESIS
&kp ESC     &mt LGUI I      &mt LALT S      &mt LCTRL R  &mt LSHFT T       &kp G       &kp P               &kp N      &kp E        &kp A  &kp O    &kp SEMI
&kp DELETE  &kp PERIOD      &ht4 LG(X) 0    &mt LC(C) W  &mt LC(V) D       &kp J       &kp B               &kp H      &kp V        &kp Y  &kp X    &kp RIGHT_PARENTHESIS
                                            &lt 9 TAB    &lt 10 ENTER      &ht1 8 0    &mt LSHFT CAPSLOCK  &ht3 10 0  &lt 9 SPACE
            >;
        };

        FUNCTION_KEYS {
            bindings = <
&bt BT_SEL 0  &kp F2          &kp F3            &kp F4             &kp F5           &kp F8            &to 15           &kp F7  &kp F8  &kp F9  &kp F12  &lu 11 RGB_COLOR_HSB_VAL(116,100,79)
&bt BT_SEL 1  &mod_gui_dance  &mod_alt_dance    &mod_ctrl_dance    &mod_shft_dance  &kp C_NEXT        &rgb_ug RGB_TOG  &kp F4  &kp F5  &kp F6  &kp F11  &to 16
&out OUT_TOG  &kp LC(Z)       &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PREVIOUS    &to 11           &kp F1  &kp F2  &kp F3  &kp F10  &flash
                                                &none              &none            &none             &kp LALT         &none   &none
            >;

            label = "FUNC";
        };

        NUM_PAD_LEFT {
            bindings = <
&kt LEFT_PARENTHESIS   &brackets     &kp N7  &kp N8  &kp N9     &kp PLUS        &kp PAGE_UP    &kp HOME      &kp UP      &kp END        &none  &none
&none                  &kp SLASH     &kp N4  &kp N5  &kp N6     &kp MINUS       &kp PAGE_DOWN  &kp LEFT      &kp DOWN    &kp RIGHT      &none  &none
&kp RIGHT_PARENTHESIS  &kp ASTERISK  &kp N1  &kp N2  &kp N3     &kp N0          &none          &kp LC(LEFT)  &none       &kp LC(RIGHT)  &none  &none
                                             &none   &kp ENTER  &lt 10 ENTER    &kp LC(LSHFT)  &kp LSHFT     &kp LCTRL
            >;

            label = "NUM_L";
        };

        NUM_PAD_RIGHT {
            bindings = <
&none  &none  &kp HOME      &kp UP     &kp END        &kp PAGE_UP      &kp PLUS     &kp N7     &kp N8  &kp N9  &brackets     &kp LEFT_PARENTHESIS
&none  &none  &kp LEFT      &kp DOWN   &kp RIGHT      &kp PAGE_DOWN    &kp MINUS    &kp N4     &kp N5  &kp N6  &kp SLASH     &none
&none  &none  &kp LC(LEFT)  &none      &kp LC(RIGHT)  &none            &kp N0       &kp N1     &kp N2  &kp N3  &kp ASTERISK  &kp RIGHT_PARENTHESIS
                            &kp RCTRL  &kp LSHFT      &kp LC(LSHFT)    &lt 9 ENTER  &kp ENTER  &none
            >;

            label = "NUM_R";
        };

        SETTINGS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&soft_off   &none         &none         &none              &out OUT_TOG      &ext_power EP_TOG    &rgb_ug RGB_SAD  &rgb_ug RGB_SAI                  &rgb_ug RGB_HUD                  &rgb_ug RGB_HUI                    &rgb_ug RGB_COLOR_HSB(0,0,100)     &rgb_ug RGB_COLOR_HSB(0,95,49)
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4         &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                  &rgb_ug RGB_BRD                  &rgb_ug RGB_BRI                    &none                              &rgb_ug RGB_SPI
&none       &none         &none         &ext_power EP_OFF  &ext_power EP_ON  &none                &rgb_ug RGB_EFR  &rgb_ug RGB_COLOR_HSB(0,100,98)  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(111,100,50)  &rgb_ug RGB_COLOR_HSB(263,100,50)  &rgb_ug RGB_SPD
                                        &none              &none             &to 0                &to 0            &none                            &none
            >;

            label = "SETT";
        };

        SYMBOLS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp DOLLAR  &kp POUND      &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &none     &none   &none       &kp LC(POUND)  &none        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &none     &none   &none       &none          &none        &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI    &none          &kp SPACE    &kp RET    &none      &kp RALT
            >;

            label = "SYMB";
        };

        NAVIGATION_LAYER_WIN {
            bindings = <
&kp RG(F)  &kp RG(NUMBER_1)  &kp RG(NUMBER_2)  &kp RG(NUMBER_3)  &kp RG(NUMBER_4)  &kp RG(N5)    &none  &none  &none  &none  &none  &none
&kp RG(G)  &kp RG(NUMBER_6)  &kp RG(N7)        &kp RG(N8)        &kp RG(N9)        &kp RG(N0)    &none  &none  &none  &none  &none  &none
&kp RG(H)  &kp RG(A)         &kp RG(B)         &kp RG(C)         &kp RG(D)         &kp RG(E)     &none  &none  &none  &none  &none  &none
                                               &none             &none             &none         &none  &none  &none
            >;

            label = "NAV";
        };

        QWERT {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E     &kp R      &kp T          &kp Y         &kp U               &kp I         &kp O    &kp P     &kp BSPC
&kp ESCAPE  &kp A  &kp S  &kp D     &kp F      &kp G          &kp H         &kp J               &kp K         &kp L    &kp SQT   &kp LEFT_PARENTHESIS
&kp DELETE  &kp Z  &kp X  &kp C     &kp V      &kp B          &kp N         &kp M               &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_PARENTHESIS
                          &kp LGUI  &kp LCTRL  &lt 8 SPACE    &lt 10 ENTER  &mt CAPSLOCK LSHFT  &kp LALT
            >;

            label = "QWERT";
        };

        ISRT {
            bindings = <
&kp TAB     &kp Y       &kp C       &kp L        &kp M        &kp K          &kp Z                    &kp F      &kp U      &kp COMMA  &kp SQT  &kp LEFT_PARENTHESIS
&kp ESC     &mt LGUI I  &mt LALT S  &mt LCTRL R  &mt LSHFT T  &kp G          &kp P                    &kp N      &kp E      &kp A      &kp O    &kp SEMI
&kp DELETE  &kp Q       &kp V       &kp W        &kp D        &kp J          &kp B                    &kp H      &kp FSLH   &kp DOT    &kp X    &kp RIGHT_PARENTHESIS
                                    &lt 10 TAB   &kp ENTER    &lt 8 SPACE    &mt LSHFT CAPSLOCK       &kp ENTER  &kp SPACE
            >;

            label = "ISRT_SS";
        };

        bootloader_layer {
            bindings = <
&none  &none  &none  &none        &none   &none    &none  &none   &none        &none  &none  &none
&none  &none  &none  &bootloader  &flash  &none    &none  &flash  &bootloader  &none  &none  &none
&none  &none  &none  &none        &none   &none    &none  &none   &none        &none  &none  &none
                     &none        &none   &none    &none  &none   &none
            >;

            label = "flash mode";
        };
    };
};
