/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

&sl { release-after-ms = <2000>; };

&mt { flavor = "tap-preferred"; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_num_pad_right_layer {
            bindings = <&tog 3>;
            key-positions = <14 15 16>;
        };

        combo_num_pad_left_layer {
            bindings = <&tog 4>;
            key-positions = <19 20 21>;
        };

        combo_settings_layer {
            bindings = <&tog 5>;
            key-positions = <1 2 3 4>;
        };

        combo_symbols_layer {
            bindings = <&sl 6>;
            key-positions = <31 32 33>;
        };

        combo_shortcuts_layer {
            bindings = <&tog 2>;
            key-positions = <28 26>;
        };

        combo_num_pad_right_layer_Lhand {
            bindings = <&tog 4>;
            key-positions = <14 3 16>;
        };

        combo_num_pad_left_layer_Rhand {
            bindings = <&tog 3>;
            key-positions = <19 8 21>;
        };

        combo_default_layer {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };

        combo_symbols_layer_sticky {
            bindings = <&sl 6>;
            key-positions = <31 33>;
        };

        combo_dot_left {
            bindings = <&kp PERIOD>;
            key-positions = <27 28>;
            layers = <3>;
        };

        combo_dot_right {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
            layers = <4>;
        };

        combo_delete_num_pad_left {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
            layers = <3 0 8>;
            timeout-ms = <20>;
        };

        combo_backspace_num_pad_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            layers = <3 0 8>;
            timeout-ms = <20>;
        };

        combo_delete_num_pad_right {
            bindings = <&kp DELETE>;
            key-positions = <15 16>;
            layers = <4 0 8 2>;
            timeout-ms = <20>;
        };

        combo_backspace_num_pad_right {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
            layers = <4 0 8>;
            timeout-ms = <20>;
        };

        combo_equal_left {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            layers = <3>;
        };

        combo_equal_right {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
            layers = <4>;
        };

        combo_navigation_layer {
            bindings = <&sl 7>;
            key-positions = <14 16>;
        };

        combo_QWERTY_layer {
            bindings = <&tog 8>;
            key-positions = <36 41>;
        };

        combo_left_arrow_Lhand {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <26 27>;
            layers = <0 8>;
        };

        combo_right_arrow_Lhand {
            bindings = <&kp RIGHT>;
            key-positions = <27 28>;
            layers = <0 8>;
        };

        combo_up_arrow_Lhand {
            bindings = <&kp UP_ARROW>;
            key-positions = <3 4>;
            layers = <0 8>;
        };

        combo_down_arrow_Lhand {
            bindings = <&kp DOWN>;
            key-positions = <3 2>;
            layers = <0 8>;
        };

        combo_left_arrow_Rhand {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <32 31>;
            layers = <0 8>;
        };

        combo_right_arrow_Rhand {
            bindings = <&kp RIGHT>;
            key-positions = <32 33>;
            layers = <0 8>;
        };

        combo_up_arrow_Rhand {
            bindings = <&kp UP_ARROW>;
            key-positions = <7 8>;
            layers = <0 8>;
            timeout-ms = <20>;
        };

        combo_down_arrow_Rhand {
            bindings = <&kp DOWN>;
            key-positions = <8 9>;
            layers = <0 8>;
            timeout-ms = <20>;
        };

        combo_esc_shortcuts {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
            layers = <2>;
        };

        to_0_L {
            bindings = <&to 0>;
            key-positions = <38 15>;
            timeout-ms = <20>;
        };

        to_0_R {
            bindings = <&to 0>;
            key-positions = <39 20>;
            timeout-ms = <20>;
        };
    };

    behaviors {
        ht0: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht1: mo_td0 {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TD0";
            bindings = <&mo>, <&td0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht2: mo_keyrepeat {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_KEYREPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht3: mo_td2 {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TD2";
            bindings = <&mo>, <&td2>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td0: space_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_DOT";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&duoSpace>;

            tapping-term-ms = <250>;
        };

        td1: stick_toggle_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "STICK_TOGGLE_ALT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT>, <&kt LEFT_ALT>;
        };

        td2: repeat_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "REPEAT_ENTER";
            #binding-cells = <0>;
            bindings = <&key_repeat>, <&kp ENTER>;
        };
    };

    macros {
        duoSpace: duoSpace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE>;
            label = "DUOSPACE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        WB_LAYER {
            // -----------------------------------------------------------------------------------------
            // |  '  |  ,  |  C  |  L   |  M   |  K   |   |  Z   |  F  |  U  |  Q  |  S  |  [  |
            // | TAB |  I  |  S  |  R   |  T   |  G   |   |  P   |  N  |  E  |  A  |  O  |  ;  |
            // | DEL |  .  |  /  |  W   |  D   |  J   |   |  B   |  H  |  V  |  Y  |  X  |  ]  |
            //                   | SHFT | BKSP | CTRL |   | CTRL | ENT | GUI |

            bindings = <
&kp TAB     &mt LA(P) COMMA  &mt LC(X) C      &mt LC(C) L  &mt LC(V) M       &kp K       &kp Z                    &kp F     &kp U        &kp Q  &kp SQT  &kp LEFT_PARENTHESIS
&kp ESC     &mt LEFT_GUI I   &mt LEFT_ALT S   &mt LCTRL R  &mt LEFT_SHIFT T  &kp G       &kp P                    &kp N     &kp E        &kp A  &kp O    &kp SEMI
&kp DELETE  &kp PERIOD       &mt LC(A) SLASH  &kp W        &kp D             &kp J       &kp B                    &kp H     &kp V        &kp Y  &kp X    &kp RIGHT_PARENTHESIS
                                              &lt 3 TAB    &lt 4 ENTER       &ht1 1 0    &mt LEFT_SHIFT CAPSLOCK  &ht3 4 0  &lt 3 SPACE
            >;

            label = "ISRT_WB";
        };

        FUNCTION_KEYS {
            bindings = <
&bt BT_SEL 0  &kp F2        &kp F3            &kp F4             &kp F5           &kp F8            &to 9            &kp F7  &kp F8  &kp F9  &kp F12  &none
&bt BT_SEL 1  &sk LEFT_GUI  &td1              &sk LEFT_CONTROL   &sk LEFT_SHIFT   &kp C_NEXT        &rgb_ug RGB_TOG  &kp F4  &kp F5  &kp F6  &kp F11  &none
&bt BT_SEL 2  &kp C_MUTE    &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PREVIOUS    &to 5            &kp F1  &kp F2  &kp F3  &kp F10  &none
                                              &none              &none            &none             &kp LEFT_ALT     &none   &none
            >;

            label = "FUNC";
        };

        SHORTCUT_LAYER_WIN {
            bindings = <
&kp LC(LG(F))  &kp LC(LG(N1))        &kp LC(LG(N2))  &kp LC(LG(NUMBER_3))  &kp LC(LG(NUMBER_4))  &kp LC(LG(N5))    &none  &none  &none  &none  &none  &none
&kp LG(LC(G))  &kp LC(LG(NUMBER_6))  &kp LC(LG(N7))  &kp LC(LG(N8))        &kp LG(LC(N9))        &kp LG(LC(N0))    &none  &none  &none  &none  &none  &none
&kp LC(LG(H))  &kp LC(LG(A))         &kp LC(LG(B))   &kp LC(LG(C))         &kp LC(LG(D))         &kp LC(LG(E))     &none  &none  &none  &none  &none  &none
                                                     &ht0 4 0              &lt 3 ENTER           &kp LEFT_SHIFT    &none  &none  &none
            >;

            label = "SHORTCUT";
        };

        NUM_PAD_LEFT {
            bindings = <
&kt LEFT_PARENTHESIS   &none         &kp N7  &kp N8  &kp N9     &kp PLUS       &kp PAGE_UP         &kp HOME            &kp UP_ARROW      &kp END              &none  &none
&none                  &kp SLASH     &kp N4  &kp N5  &kp N6     &kp MINUS      &kp PAGE_DOWN       &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &none  &none
&kp RIGHT_PARENTHESIS  &kp ASTERISK  &kp N1  &kp N2  &kp N3     &kp N0         &none               &kp LC(LEFT_ARROW)  &none             &kp LC(RIGHT_ARROW)  &none  &none
                                             &none   &kp ENTER  &lt 4 ENTER    &kp LC(LEFT_SHIFT)  &kp LEFT_SHIFT      &kp LEFT_CONTROL
            >;

            label = "NUMPAD_L";
        };

        NUM_PAD_RIGHT {
            bindings = <
&none  &none  &kp HOME            &kp UP     &kp END              &kp PAGE_UP           &kp PLUS     &kp N7     &kp N8  &kp N9  &none         &kp LEFT_PARENTHESIS
&none  &none  &kp LEFT            &kp DOWN   &kp RIGHT            &kp PAGE_DOWN         &kp MINUS    &kp N4     &kp N5  &kp N6  &kp SLASH     &none
&none  &none  &kp LC(LEFT_ARROW)  &none      &kp LC(RIGHT_ARROW)  &none                 &kp N0       &kp N1     &kp N2  &kp N3  &kp ASTERISK  &kp RIGHT_PARENTHESIS
                                  &kp RCTRL  &kp LEFT_SHIFT       &kp LC(LEFT_SHIFT)    &lt 3 ENTER  &kp ENTER  &none
            >;

            label = "NUMPAD_R";
        };

        SETTINGS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&soft_off   &none         &none         &none              &out OUT_TOG      &ext_power EP_TOG    &rgb_ug RGB_SAD  &rgb_ug RGB_SAI                  &rgb_ug RGB_HUD                  &rgb_ug RGB_HUI                    &rgb_ug RGB_COLOR_HSB(0,0,100)     &rgb_ug RGB_COLOR_HSB(0,95,49)
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4         &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                  &rgb_ug RGB_BRD                  &rgb_ug RGB_BRI                    &none                              &rgb_ug RGB_SPI
&none       &none         &none         &ext_power EP_OFF  &ext_power EP_ON  &none                &rgb_ug RGB_EFR  &rgb_ug RGB_COLOR_HSB(0,100,98)  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(111,100,50)  &rgb_ug RGB_COLOR_HSB(263,100,50)  &rgb_ug RGB_SPD
                                        &none              &none             &to 0                &to 0            &none                            &none
            >;

            label = "SETTINGS";
        };

        SYMBOLS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp DOLLAR  &kp POUND      &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &none     &none   &none       &kp LC(POUND)  &none        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &none     &none   &none       &none          &none        &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI    &none          &kp SPACE    &kp RET    &none      &kp RALT
            >;

            label = "SYMBOLS";
        };

        NAVIGATION_LAYER_WIN {
            bindings = <
&kp RG(F)  &kp RG(NUMBER_1)  &kp RG(NUMBER_2)  &kp RG(NUMBER_3)  &kp RG(NUMBER_4)  &kp RG(N5)    &none  &none  &none  &none  &none  &none
&kp RG(G)  &kp RG(NUMBER_6)  &kp RG(N7)        &kp RG(N8)        &kp RG(N9)        &kp RG(N0)    &none  &none  &none  &none  &none  &none
&kp RG(H)  &kp RG(A)         &kp RG(B)         &kp RG(C)         &kp RG(D)         &kp RG(E)     &none  &none  &none  &none  &none  &none
                                               &none             &none             &none         &none  &none  &none
            >;

            label = "NAV";
        };

        QWERT {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E         &kp R      &kp T          &kp Y        &kp U                    &kp I         &kp O    &kp P     &kp BSPC
&kp ESCAPE  &kp A  &kp S  &kp D         &kp F      &kp G          &kp H        &kp J                    &kp K         &kp L    &kp SQT   &kp LEFT_PARENTHESIS
&kp DELETE  &kp Z  &kp X  &kp C         &kp V      &kp B          &kp N        &kp M                    &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_PARENTHESIS
                          &kp LEFT_GUI  &kp LCTRL  &lt 1 SPACE    &lt 4 ENTER  &mt CAPSLOCK LEFT_SHIFT  &kp LEFT_ALT
            >;

            label = "QWERT";
        };

        ISRT {
            bindings = <
&kp TAB     &kp Y           &kp C           &kp L        &kp M             &kp K          &kp Z                    &kp F      &kp U      &kp COMMA  &kp SQT  &kp LEFT_PARENTHESIS
&kp ESC     &mt LEFT_GUI I  &mt LEFT_ALT S  &mt LCTRL R  &mt LEFT_SHIFT T  &kp G          &kp P                    &kp N      &kp E      &kp A      &kp O    &kp SEMI
&kp DELETE  &kp Q           &kp V           &kp W        &kp D             &kp J          &kp B                    &kp H      &kp FSLH   &kp DOT    &kp X    &kp RIGHT_PARENTHESIS
                                            &lt 4 TAB    &kp ENTER         &lt 1 SPACE    &mt LEFT_SHIFT CAPSLOCK  &kp ENTER  &kp SPACE
            >;

            label = "ISRT_SS";
        };
    };
};
