/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <33 34>;
            layers = <0>;
        };

        combo_caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <40 21>;
            layers = <0>;
        };

        combo_num_pad_right_layer {
            bindings = <&tog 2>;
            key-positions = <14 15 16>;
        };

        combo_num_pad_left_layer {
            bindings = <&tog 3>;
            key-positions = <19 20 21>;
        };

        combo_settings_layer {
            bindings = <&tog 4>;
            key-positions = <1 2 3 4>;
        };

        combo_symbols_layer {
            bindings = <&tog 5>;
            key-positions = <31 32 33>;
        };

        combo_shortcuts_layer {
            bindings = <&tog 6>;
            key-positions = <27 28 26>;
        };

        combo_num_pad_right_layer_Lhand {
            bindings = <&tog 3>;
            key-positions = <14 3 16>;
        };

        combo_num_pad_left_layer_Rhand {
            bindings = <&tog 2>;
            key-positions = <19 8 21>;
        };

        combo_default_layer {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };

        combo_symbols_layer_sticky {
            bindings = <&sl 5>;
            key-positions = <31 33>;
        };

        combo_dot_left {
            bindings = <&kp PERIOD>;
            key-positions = <27 28>;
            layers = <2>;
        };

        combo_dot_right {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
            layers = <3>;
        };

        combo_delete_num_pad_left {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
            layers = <2 0 8>;
        };

        combo_backspace_num_pad_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            layers = <2 0 8>;
        };

        combo_delete_num_pad_right {
            bindings = <&kp DELETE>;
            key-positions = <15 16>;
            layers = <3 0 8>;
        };

        combo_backspace_num_pad_right {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
            layers = <3 0 8>;
        };

        combo_equal_left {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            layers = <2>;
        };

        combo_equal_right {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
            layers = <3>;
        };

        combo_navigation_layer {
            bindings = <&sl 7>;
            key-positions = <14 16>;
        };

        combo_ISRT_layer {
            bindings = <&tog 8>;
            key-positions = <13 15 14 16 18 19 20 21>;
        };

        combo_left_arrow_Lhand {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <26 27>;
            layers = <0 8>;
        };

        combo_right_arrow_Lhand {
            bindings = <&kp RIGHT>;
            key-positions = <27 28>;
            layers = <0 8>;
        };

        combo_up_arrow_Lhand {
            bindings = <&kp UP_ARROW>;
            key-positions = <3 4>;
            layers = <0 8>;
        };

        combo_down_arrow_Lhand {
            bindings = <&kp DOWN>;
            key-positions = <3 2>;
            layers = <0 8>;
        };

        combo_left_arrow_Rhand {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <32 31>;
            layers = <0 8>;
        };

        combo_right_arrow_Rhand {
            bindings = <&kp RIGHT>;
            key-positions = <32 33>;
            layers = <0 8>;
        };

        combo_up_arrow_Rhand {
            bindings = <&kp UP_ARROW>;
            key-positions = <7 8>;
            layers = <0 8>;
        };

        combo_down_arrow_Rhand {
            bindings = <&kp DOWN>;
            key-positions = <8 9>;
            layers = <0 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERT {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E             &kp R         &kp T          &kp Y        &kp U           &kp I         &kp O    &kp P     &kp BSPC
&kp ESCAPE  &kp A  &kp S  &kp D             &kp F         &kp G          &kp H        &kp J           &kp K         &kp L    &kp SQT   &kp LEFT_PARENTHESIS
&kp DELETE  &kp Z  &kp X  &kp C             &kp V         &kp B          &kp N        &kp M           &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_PARENTHESIS
                          &kp LEFT_CONTROL  &kp LEFT_WIN  &lt 1 SPACE    &lt 3 ENTER  &kp LEFT_SHIFT  &kp LEFT_ALT
            >;

            label = "QWERT";
        };

        FUNCTION_KEYS {
            bindings = <
&trans           &kp F2        &kp F3            &kp F4             &kp F5           &kp F8       &none         &kp F7  &kp F8  &kp F9  &kp F12  &none
&rgb_ug RGB_TOG  &sk LEFT_ALT  &sk LEFT_WIN      &sk LEFT_CONTROL   &sk LEFT_SHIFT   &kp PLUS     &none         &kp F4  &kp F5  &kp F6  &kp F11  &none
&trans           &kp C_MUTE    &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp MINUS    &none         &kp F1  &kp F2  &kp F3  &kp F10  &none
                                                 &none              &none            &none        &kp LEFT_ALT  &none   &none
            >;

            label = "FUNC";
        };

        NUM_PAD_LEFT {
            bindings = <
&none  &kp LEFT_PARENTHESIS   &kp N7  &kp N8  &kp N9        &kp SLASH      &kp PAGE_UP         &kp HOME        &kp UP_ARROW      &kp END          &none  &none
&none  &kp BACKSPACE          &kp N4  &kp N5  &kp N6        &kp MINUS      &kp PAGE_DOWN       &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW  &none  &none
&none  &kp RIGHT_PARENTHESIS  &kp N1  &kp N2  &kp N3        &kp PLUS       &none               &kp AT_SIGN     &kp BACKSPACE     &kp DELETE       &none  &none
                                      &kp N0  &kp ASTERISK  &lt 3 ENTER    &kp LC(LEFT_SHIFT)  &kp LEFT_SHIFT  &kp LEFT_CONTROL
            >;

            label = "NUMPAD_L";
        };

        NUM_PAD_RIGHT {
            bindings = <
&none  &none  &kp HOME       &kp UP      &kp END         &kp PAGE_UP           &kp SLASH    &kp N7        &kp N8  &kp N9  &kp LEFT_PARENTHESIS   &none
&none  &none  &kp LEFT       &kp DOWN    &kp RIGHT       &kp PAGE_DOWN         &kp MINUS    &kp N4        &kp N5  &kp N6  &kp BACKSPACE          &none
&none  &none  &kp BACKSPACE  &kp DELETE  &kp AT_SIGN     &none                 &kp PLUS     &kp N1        &kp N2  &kp N3  &kp RIGHT_PARENTHESIS  &none
                             &kp RCTRL   &kp LEFT_SHIFT  &kp LC(LEFT_SHIFT)    &lt 2 ENTER  &kp ASTERISK  &kp N0
            >;

            label = "NUMPAD_R";
        };

        SETTINGS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&soft_off   &none         &none         &none              &out OUT_TOG      &ext_power EP_TOG    &rgb_ug RGB_SAD  &rgb_ug RGB_SAI                  &rgb_ug RGB_HUD                  &rgb_ug RGB_HUI                    &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,95,49)
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4         &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                  &rgb_ug RGB_BRD                  &rgb_ug RGB_BRI                    &none                           &rgb_ug RGB_SPI
&kp LSHFT   &none         &none         &ext_power EP_OFF  &ext_power EP_ON  &none                &rgb_ug RGB_EFR  &rgb_ug RGB_COLOR_HSB(0,100,98)  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(111,100,50)  &none                           &rgb_ug RGB_SPD
                                        &kp LGUI           &none             &kp SPACE            &kp RET          &none                            &kp RALT
            >;

            label = "SETTINGS";
        };

        SYMBOLS {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp DOLLAR  &kp POUND  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &none     &none   &none       &none      &none        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &none     &none   &none       &none      &none        &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI    &none      &kp SPACE    &kp RET    &none      &kp RALT
            >;

            label = "SYMBOLS";
        };

        SHORTCUT_LAYER_WIN {
            bindings = <
&kp RG(RC(F))  &kp RG(RC(NUMBER_1))  &kp RG(RC(NUMBER_2))  &kp RG(RC(NUMBER_3))  &kp RG(RC(NUMBER_4))  &kp RG(RC(N5))    &none  &none  &none  &none  &none  &none
&kp RG(RC(G))  &kp RG(RC(NUMBER_6))  &kp RG(RC(N7))        &kp RG(RC(N8))        &kp RG(RC(N9))        &kp RG(RC(N0))    &none  &none  &none  &none  &none  &none
&kp RG(RC(H))  &kp RG(RC(A))         &kp RG(RC(B))         &kp RG(RC(C))         &kp RG(RC(D))         &kp RG(RC(E))     &none  &none  &none  &none  &none  &none
                                                           &kp RIGHT_SHIFT       &mo 7                 &lt 2 ENTER       &none  &none  &none
            >;

            label = "SHORTCUT";
        };

        NAVIGATION_LAYER_WIN {
            bindings = <
&kp RG(G)  &kp RG(NUMBER_1)  &kp RG(NUMBER_2)  &kp RG(NUMBER_3)  &kp RG(NUMBER_4)  &kp RG(N5)    &none  &none  &none  &none  &none  &none
&kp RG(H)  &kp RG(NUMBER_6)  &kp RG(N7)        &kp RG(N8)        &kp RG(N9)        &kp RG(N0)    &none  &none  &none  &none  &none  &none
&kp RG(I)  &kp RG(A)         &kp RG(B)         &kp RG(C)         &kp RG(D)         &kp RG(F)     &none  &none  &none  &none  &none  &none
                                               &none             &none             &none         &none  &none  &none
            >;

            label = "NAV";
        };

        ISRT {
            // -----------------------------------------------------------------------------------------
            // | ESC |  Y  |  C  |  L   |  M   |  K   |   |  Z   |  F  |  U  |  ,  |  '  |  [  |
            // | TAB |  I  |  S  |  R   |  T   |  G   |   |  P   |  N  |  E  |  A  |  O  |  ;  |
            // | DEL |  Q  |  V  |  W   |  D   |  J   |   |  B   |  H  |  /  |  .  |  X  |  ]  |
            //                   | SHFT | BKSP | CTRL |   | CTRL | ENT | GUI |

            bindings = <
&kp ESC     &kp Y  &kp C  &kp L      &kp M     &kp K        &kp Z      &kp F    &kp U     &kp COMMA  &kp SQT  &kp LEFT_PARENTHESIS
&kp TAB     &kp I  &kp S  &kp R      &kp T     &kp G        &kp P      &kp N    &kp E     &kp A      &kp O    &kp SEMI
&kp DELETE  &kp Q  &kp V  &kp W      &kp D     &kp J        &kp B      &kp H    &kp FSLH  &kp DOT    &kp X    &kp RIGHT_PARENTHESIS
                          &kp LSHFT  &kp BSPC  &kp LCTRL    &kp LCTRL  &kp RET  &kp LGUI
            >;

            label = "ISRT";
        };
    };
};
